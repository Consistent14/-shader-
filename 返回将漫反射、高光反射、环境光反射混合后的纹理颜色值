Shader "Custom/返回将漫反射、高光反射、环境光反射混合后的纹理颜色值"
{
	Properties
	{
		_MainTex ("Texture", 2D) = "white" {}
		_Color("Main Color", Color) = (1, 1, 1, 1)
		_SpecShininess("Specular Shininess", float) = 1.0
		_SpecColor("Specular Color", Color) = (1, 1, 1, 1)
	}
	SubShader
	{
		Tags { "LIGHTMOED"="ForwardBase" }
		LOD 100

		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			
			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 texcoord : TEXCOORD1;
			};

			struct v2f
			{
				float4 vertex : SV_POSITION;
				float4 posWorld : TEXCOORD0;
				float4 texcoord : TEXCOORD1;
				float3 normalWorld : TEXCOORD2;
			};

			sampler2D _MainTex;
			float4 _MainTex_ST;
			float4 _Color;
			float4 _SpecColor;
			float _SpecShininess;
			float3 _LightColor0;
			
			v2f vert (appdata t)
			{
				v2f o;
				o.vertex = UnityObjectToClipPos(t.vertex);
				o.posWorld = mul(unity_ObjectToWorld, t.vertex);
				o.texcoord = t.texcoord;
				o.normalWorld = mul(float4(t.normal, 0), unity_WorldToObject).xyz;
				return o;
			}
			
			fixed4 frag (v2f v) : SV_Target
			{
				fixed3 lightDirection = normalize(_WorldSpaceLightPos0.xyz);
				fixed3 viewDirection = normalize(v.posWorld.xyz - _WorldSpaceCameraPos);
				fixed3 normalDirection = normalize(v.normalWorld);
				fixed3 diffuse =_LightColor0.rgb * _Color.rgb * max(0, dot(normalDirection, lightDirection)); 
				fixed3 specular;
				if(dot(normalDirection,lightDirection) < 0)
				{
					specular = fixed3(0, 0, 0);
				}
				else
				{
					fixed3 reflecDirection = reflect(normalDirection,lightDirection);
					specular = _LightColor0.rgb * _SpecColor.rgb * pow(max(0, dot(reflecDirection,viewDirection)),_SpecShininess);
				}

				fixed4 texColor = tex2D(_MainTex, v.texcoord);
				fixed4 diffuseSpecularAmbient = fixed4(diffuse, 0) + fixed4(specular, 0) + UNITY_LIGHTMODEL_AMBIENT;

				return diffuseSpecularAmbient * texColor;
			}
			ENDCG
		}
	}
}
